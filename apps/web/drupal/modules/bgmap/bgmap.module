<?php
/**
 * @file
 * A module that creates Navigation related blocks.
 */

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function bgmap_help($path, $arg)
{
    switch ($path) {
        case "admin/help#bgmap":
            return '<p>' . t("Manage Geo/OBD data.") . '</p>';
            break;
    }
}

/**
 * Implements hook_block_info().
 */
function bgmap_block_info()
{
    $blocks = array();
    $blocks['rtsingle'] = array(
        // The name that will appear in the block list.
        'info' => t('Location Tracking'),
        // Default setting.
        'cache' => DRUPAL_CACHE_PER_ROLE,
    );
    $blocks['rtmulti'] = array(
        'info' => t('Location Tracking All'),
        'cache' => DRUPAL_CACHE_PER_ROLE,
    );
    $blocks['trace'] = array(
        'info' => t('Location Trace'),
        'cache' => DRUPAL_CACHE_PER_ROLE,
    );
    $blocks['tracemulti'] = array(
        'info' => t('Location Trace All'),
        'cache' => DRUPAL_CACHE_PER_ROLE,
    );
    $blocks['fuel'] = array(
        'info' => t('Fuel Usage'),
        'cache' => DRUPAL_CACHE_PER_ROLE,
    );
    return $blocks;
}

/**
 * Implements hook_permission().
 */
function bgmap_permission()
{
    return array(
        'access bgmap content' => array(
            'title' => t('Access content for the bgmap module'),
        )
    );
}

function bgmap_init()
{
    drupal_add_js(drupal_get_path('module', 'bgmap') . '/bgmap.js');
    //

}

/**
 * Implements hook_libraries_info().
 */
function bgmap_libraries_info()
{
    $libraries = array();

    if (($library_path = libraries_get_path('daterangepicker'))) {
        //print_r("Daterange lib path OK.");

        $libraries['daterangepicker'] = array(
            'library path' => $library_path,
            'name' => 'Daterange Picker',
            'vendor url' => 'http://www.daterangepicker.com/',
            'download url' => 'https://github.com/dangrossman/bootstrap-daterangepicker/archive/master.zip',
            'version callback' => 'bgmap_short_circuit_version',
            'files' => array(
                'js' => array(
                    'daterangepicker.js',
                ),
                'css' => array(
                    'daterangepicker.css',
                ),
            ),
            /*
            'dependencies' => array(
                  'moment',
            ),
            */
        );
    }
    $libraries['leaflet'] = array(
        //'title' => 'Vertical Tabs',
        //'website' => 'http://drupal.org/node/323112',
        'name' => 'Leaflet',
        'vendor url' => 'http://www.leaflet.com/',
        'download url' => 'http://www.leaflet.com/download',
        /*
        // TODO: automatically get version number from Changelog or readme.
        'version arguments' => array(
        'file' => 'highcharts.js',
        // jQuery FlexSlider v2.1
        'pattern' => '/Highcharts v(\d+\.+\d+)/',
        'lines' => 2,
      ),
      */
        'version callback' => 'bgmap_short_circuit_version',
        'files' => array(
            'js' => array(
                'leaflet.js',
            ),
            'css' => array(
                'leaflet.css' => array(),
            ),
        ),
    );

/*
    $libraries['moment'] = array(
      'name' => 'Moment JS',
      'vendor url' => 'http://www.daterangepicker.com/',
      'download url' => 'https://github.com/dangrossman/bootstrap-daterangepicker/archive/master.zip',
    'version callback' => 'bgmap_short_circuit_version',
    'files' => array(
      'js' => array(
        'moment.js',
      ),
    ),
    );
*/
    return $libraries;
}

/**
 * Short-circuit the version argument.
 */
function bgmap_short_circuit_version()
{
    return TRUE;
}

/**
 * Implements hook_menu().
 */
function bgmap_menu()
{
    $items = array();

    // Provide configuration options for the module from Admin page.
    $items['admin/config/content/bgmap'] = array(
        'title' => 'BGTrans',
        'description' => 'Configuration for bgtrans module',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bgmap_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
    );
    $items['bgmap'] = array(
        'title' => 'Real time map',
        'page callback' => '_bgmap_page',
        'access arguments' => array('access bgmap content'),
        //Will appear in Navigation menu.
        'type' => MENU_NORMAL_ITEM,
    );
    $items['bgmap/get'] = array(
        'title' => 'Real time map',
        'page callback' => '_get_json',
        //'page arguments' => array(1), //get param from URL.
        'access arguments' => array('access bgmap content'),
        'type' => MENU_CALLBACK,
    );
    $items['bgmap/geoj'] = array(
        'title' => 'Retrieve GeoJSON for RT markers or Trace.',
        'page callback' => '_get_geojson',
        //'page arguments' => array(1), //get param from URL.
        'access arguments' => array('access bgmap content'),
        'type' => MENU_CALLBACK,
    );
    return $items;
}

function _bgmap_page() {
  $items = array();
  //return "Hello There!";
  return $items;
}

/**
 * Implements hook_node_insert().
 *
 * As a new node is being inserted into the database, we need to do our own
 * database inserts.
 */
function bgmap_node_insert($node)
{
    if ($node->type == 'vehicles') {
        $nid = $node->nid;
        $sid = $node->field_sensor_id['und'][0]['value'];
        $vnum = $node->field_vehicle_num['und'][0]['value'];
        $vgroup = 'car';
        $flag = true;
        //$vgroup = $node->field_vehicle_group['und'][0]['value'];
        _update_ext_db($nid, $sid, $vnum, $vgroup, $flag);
    }
    /*
    if (variable_get('bglight_node_type_' . $node->type, FALSE)) {
    // Notice that we are ignoring any revision information using $node->nid
  }
  */
}

/**
 * Implements hook_node_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 *
 * This hook is called when an existing node has been changed.
 */
function bgmap_node_update($node)
{
    //if ($node->type == 'stations' && !isset($node->nid)) {
    if ($node->type == 'vehicles') {
        //dpm($node);
        $nid = $node->nid;
        $sid = $node->field_sensor_id['und'][0]['value'];
        $vnum = $node->field_vehicle_num['und'][0]['value'];
        $vgroup = 'car';
        $flag = false;
        _update_ext_db($nid, $sid, $vnum, $vgroup, $flag);
    }
}

/**
 * Implements hook_block_view().
 *
 * Prepares the contents of the block.
 */
function bgmap_block_view($delta = '')
{
    // Set sid invalid by default, means to select all.
    //drupal_add_js(array('trace' => array('sid' => -1)), 'setting');
    $block = array();
    // TODO: exit if it is not a node but a view or something else. But should allow selected views.
    // TODO: Move this to init? For the case of view this happens outside.
    $mpath = drupal_get_path('module', 'bgmap');
    if ($node = menu_get_object()) {
        if ($node->type == 'vehicles') {
            //dpm($node);
            $nid = $node->nid;
            // TODO: Fix this. Use the correct approach.
            $sid = $node->field_sensor_id['und'][0]['value'];
            $vnum = $node->field_vehicle_num['und'][0]['value'];
        } // if node-type.
    } // if node.
    else {
        $sid = -1;
        $vnum = -1;
    }

    switch ($delta) {
        /*
        * The real time block may appear in a page that shows all items or on a page that
        * shows single item. Create a filter to reflect this context. The filter can be
        * presented as a JSON, where some parameters may be missing, if some fields on the page
        * is missing (eg. sensor_id).
        */
        case 'rtsingle':
            // Pass any node related parameters here, which can then be used by the JS during Ajax.
            // Here will be an array that contains the filter values.
            // if(isset($sid)) {
            // vnum/sid list.
            $block['subject'] = t('Real Time Location.');
            if (user_access('access content')) {
              /*
                $items2 = array();
                $items2[] = array('Test', '2');
                // No content in the last week.
                if (empty($items2)) {
                    $block['content']['#markup'] = t('No data available.');
                    //$block['content'] = t('No data available.');
                } else {
                    // Pass data through theme function.
                    //$block['content']['#markup'] = theme('item_list', array('items' => $items2));
                    // TODO: Create empty div here?
                    $block['content']['#markup'] = theme('table', array('items' => $items2));
                    //$block['content'] = theme('item_list', array('items' => $items2));
                }
                */
                $block['content']['#markup'] = "<div id='show_report'>Map will display here.....</div>";
            }
            $block['content']['#attached']['libraries_load'][] = array('leaflet');
            // If not in libraries directory,
            //$block['content']['#attached']['library'][] = array('system','ui.droppable');
            $block['content']['#attached']['js'] = array(
                          array(
                            'type' => 'file',
                            'data' => $mpath . '/bgmap_rt.js',),
                          array(
                            'type' => 'setting',
                            'data' => array(
                              'rtsingle' => array('sid' => $sid),
                            ),
                          )
                       );
            //drupal_add_js(array('rt' => array('sid' => $sid)), 'setting');
            //$block['content']['#attached']['libraries_load'][] = array('highcharts', 'highcharts');
            //$block['content']['#attached']['libraries_load'][] = array('highcharts');
            //$block['content']['#attached']['js'] = drupal_get_path('module', 'bgmap') . '/bgmap.js';
            //drupal_add_js(drupal_get_path('module', 'module_name') . '/test.js');
            break;
        case 'rtmulti':
            // Only appears in a view.
            // TODO: What if this block is enabled for a node?
            // TODO: nidList already set in the view preprocess.
            //drupal_add_js(array('rt' => array('vtype' => 'car')), 'setting');
            $block['subject'] = t('Location Tracking All.');
            if (user_access('access content')) {
                $items2 = array();
                $items2[] = array('Test', '2');
                // No content in the last week.
                if (empty($items2)) {
                    $block['content']['#markup'] = t('No data available.');
                    //$block['content'] = t('No data available.');
                } else {
                    // Pass data through theme function.
                    //$block['content']['#markup'] = theme('item_list', array('items' => $items2));
                    // TODO: Create empty div here?
                    $block['content']['#markup'] = theme('table', array('items' => $items2));
                    //$block['content'] = theme('item_list', array('items' => $items2));
                }
            }
            break;
        case 'trace':
            // TODO: If not a node or if node type is different, don't show the block.
            //$vgroup = 'car';
            if (isset($sid)) {
              // TODO.
            }

            $block['subject'] = t('Real Time Map Trace');
            if (user_access('access content')) {
                $items2 = array();
                $items2[] = array('Test', '2');
                // No content in the last week.
                if (empty($items2)) {
                    $block['content']['#markup'] = t('No data available.');
                    //$block['content'] = t('No data available.');
                } else {
                    // Pass data through theme function.
                    //$block['content']['#markup'] = theme('item_list', array('items' => $items2));
                    $block['content']['#markup'] = theme('table', array('items' => $items2));
                    //$block['content'] = theme('item_list', array('items' => $items2));
                }
            } // access.
            $block['content']['#attached']['js'][]
                 = array('data' => 'https://cdn.jsdelivr.net/momentjs/2.14.1/moment.min.js',
                 'type' => 'external');
            $block['content']['#attached']['libraries_load'][] = array('daterangepicker');
            $block['content']['#attached']['libraries_load'][] = array('leaflet');
            drupal_add_js(array('trace' => array('sid' => $sid)), 'setting');
            $block['content']['#attached']['js'] = array(
                          array(
                            'type' => 'file',
                            'data' => $mpath . '/bgmap_trace.js',),
                          array(
                            'type' => 'setting',
                            'data' => array(
                              'trace' => array('sid' => $sid),
                            ),
                          )
                       );
            break;
        case 'tracemulti':
            // TODO: If not a node or if node type is different, don't show the block.
            //$vgroup = 'car';
            $block['subject'] = t('Real Time Map Trace All');
            if (user_access('access content')) {
                $items2 = array();
                $items2[] = array('Test', '2');
                // No content in the last week.
                if (empty($items2)) {
                    $block['content']['#markup'] = t('No data available.');
                    //$block['content'] = t('No data available.');
                } else {
                    // Pass data through theme function.
                    //$block['content']['#markup'] = theme('item_list', array('items' => $items2));
                    $block['content']['#markup'] = theme('table', array('items' => $items2));
                    //$block['content'] = theme('item_list', array('items' => $items2));
                }
            } // access.
            $block['content']['#attached']['libraries_load'][] = array('leaflet');
            break;
        case 'fuel':
            //$vgroup = 'car';
            // TODO: tmp
            $sid = 204;
            // TODO: If not a node, or node type is different, don't show the block.
            if (isset($sid)) {
                // TODO: Extend the condition to whole section.
            }

            //$filter['sidList'] = array($sid);
            //$filter['start'] = -1;
            //$filter['end'] = -1;
            $filter = new stdClass();
            $filter->sidList = array($sid);
            $filter->start = -1;
            $filter->end = -1;
            $block['subject'] = t('Fuel Usage Table');
            if (user_access('access content')) {
                $result = _getdata_exdb('fuel', $filter);
                $items2 = array();
                $items2[] = array('Test', '2');
                // No content in the last week.
                foreach ($result as $row) {
                    date_default_timezone_set('Asia/Singapore');
                    $date = new DateTime();
                    //$timeHr = date('g:i a',($row->timestamp)/1000);
                    $date->setTimestamp(($row->timestamp) / 1000);
                    $timeHr = $date->format('g:i a');

                    $fuel = round($row->value, 2);
                    if ($fuel == -1)
                        $noise = '-';

                    $items2[] = array($timeHr, $noise);
                } // foreach

                $header = array(
                    array('data' => t('Time')),
                    array('data' => t('Fuel usage')),
                );

                if (empty($items2)) {
                    $block['content']['#markup'] = t('No data available.');
                    //$block['content'] = t('No data available.');
                } else {
                    // Pass data through theme function.
                    //$block['content']['#markup'] = theme('item_list', array('items' => $items2));
                    $block['content']['#markup'] = theme('table', array('header' => $header, 'rows' => $items2, 'attributes' => array('id' => 'sort-table')));
                    //$block['content'] = theme('item_list', array('items' => $items2));
                }
            } // access.
            //drupal_add_js(array('fuel' => array('sid' => $sid)), 'setting');
            // TODO: required?
            $block['content']['#attached']['js'] = array(
                          array(
                            'type' => 'file',
                            'data' => $mpath . '/bgmap_rt.js',),
                          array(
                            'type' => 'setting',
                            'data' => array(
                              'fuel' => array('sid' => $sid),
                            ),
                          )
                       );
            break;
        case 'aob':
            if (user_access('access content')) {
                print_r("Unexpected switch");
            } // if user_access
            break;
    } // switch
    return $block;
}

/*
* https://www.drupal.org/node/1993228
*/
function bedmon_preprocess_views_view(&$vars)
{
    //dpm($vars['view']->result);
    if ($vars['view']->name == 'dashboard' && $vars['view']->current_display == 'page') {
        $active_sids = array();
        foreach ($vars['view']->result as $cnum => $cell) {
            //print_r($cell->node_title);
            $sid_content = $cell->field_field_sensor_id[0];
            //$active_nids[] = $sid_content->raw;
            $active_sids[] = $sid_content['raw']['value'];
        }
        //print_r($active_nids);
        $block['content']['#attached']['js'] = array(
                      array(
                        'type' => 'file',
                        'data' => $mpath . '/bgmap_rt.js',),
                      array(
                        'type' => 'setting',
                        'data' => array(
                          // Can be zero or more elements.
                          // TODO: Use different variable?
                          'rt' => array('sid_list' => $active_sids),
                        ),
                      )
                   );
    }
}

function _get_json()
{
    $geojson = array();
    //$geojson['test'] = 'hello';
    return drupal_json_output($geojson);
}

/**
 * Ajax end point function, menu callback.
 *
 * Used by browser JS to retrieve data in real time.
 * saved in that time period.
 *
 * @return
 *   JSON data.
 */

function test_get_geojson($reqtype)
{
    //dpm($reqtype);
    //$tst_data = $_POST['jsonPost'];
    $post_data = json_decode($_POST['jsonPost']);
    //dpm($tst_data);
    //$post_data = json_decode($tst_data);
    dpm($post_data);
    $reqtype = $post_data->reqtype;
    $filter = $post_data->filter;
    dpm($filter); // This works, but not print_r.
    $geojson = array();
    $geojson['test'] = 'hello2';
    return drupal_json_output($geojson);
}


function _get_geojson($rqtype)
{
    //function bgmap_get_geojson($filter, $reqtype, $starttime, $endtime) {
    //$nid_list = $_REQUEST['nidList'];
    $post_data = json_decode($_POST['jsonPost']);
    $reqtype = $post_data->reqtype;
    $filter = $post_data->filter;
    //dpm($filter); // This works, but not print_r.
    //print_r($filter);

    $result = _getdata_exdb($reqtype, $filter);
    //
    date_default_timezone_set('Asia/Singapore');
    $geojson = array(
        'type' => 'FeatureCollection',
        'features' => array()
    );

    $items2 = array();
    switch ($reqtype) {
        case 'trc':
            foreach ($result as $row) {
                // TODO: Or use float/double?
                $time = intval($row->timestamp);
                //$noise = round($row->noise_data, 2);
                $lat = floatval($row->latitude);
                $lng = floatval($row->longitude);

                //$polygon[] = array($lat, $lng);
                $polygon[] = array($lng, $lat);
                //
            } // foreach
            //dpm($polygon);
            $feature = array(
                'type' => 'Feature',
                'geometry' => array('type' => 'LineString', 'coordinates' => $polygon),
                'properties' => array(
                    'title' => 'Test2',
                    'line-color' => '#f00',
                    'line-size' => 'small'
                )
            );
            /*
            'title' => $row['name'],
            'marker-color' => '#f00',
            'marker-size' => 'small'
            */
            # Add feature arrays to feature collection array
            array_push($geojson['features'], $feature);
            break;
        case 'trcm':
            // TODO: Assemble Polygon GeoJSON for multiple devices.
            break;

        case 'rt': // both single and multi.
            foreach ($result as $row) {
                //$noise = round($row->noise_data, 2);
                $time = intval($row->timestamp);
                $lat = floatval($row->latitude);
                $lng = floatval($row->longitude);
                //$title = $row->title; //$row['name']

                $feature = array(
                    'type' => 'Feature',
                    'geometry' => array("type" => "Point", "coordinates" => [$lng, $lat]),
                    'properties' => array(
                        'title' => 'Test',
                        'marker-color' => '#f00',
                        'marker-size' => 'small'
                    ),
                );
                # Add feature arrays to feature collection array
                array_push($geojson['features'], $feature);
                //
            } // foreach
            break;
    }
    //dpm($geojson);
    return drupal_json_output($geojson);
}


function _getdata_exdb($reqtype, $filter)
{
    // From admin page.
    //$max_num = variable_get('bgmap_max', 3);
    //$sid_list = $filter[sidList];
    $sid_list = $filter->sidList;
    $start_time = $filter->start;
    $end_time = $filter->end;

    // TODO: Sanitize sids array before using in the query statement.
    $bg_db = array(
        'database' => 'bgmap',
        'username' => 'bgmap', // assuming this is necessary
        'password' => 'bgmap%user$1', // assuming this is necessary
        'host' => 'localhost', // assumes localhost
        'driver' => 'mysql', // replace with your database driver
    );

    Database::addConnectionInfo('BLUGRAPHTECH', 'default', $bg_db);
    db_set_active('BLUGRAPHTECH');

    // TODO: iF multiple entry match the condition, handle as error?

    $query = array();
    if ($reqtype == 'fuel') {
        $query = db_select('bgmap_obd_fuel', 'a')
            ->fields('a', array('sid', 'timestamp', 'value'))
            ->condition('sid', $sid_list, 'IN')
            ->condition('timestamp', array($start_time, $end_time), 'BETWEEN')
            ->orderBy('timestamp', 'DESC')
            ->groupBy('sid');
    }
    if ($reqtype == 'rt') {
        $query = db_select('bgmap_obd_gps', 'a')
            ->fields('a', array('sid', 'timestamp', 'longitude', 'latitude'))
            ->condition('sid', $sid_list, 'IN')
            ->orderBy('timestamp', 'DESC');
        // TODO: Can be conditional, different for block and page.
        //$query->range(0, $max_num);
        // TODO: Use timestamp condition instead?
        $query->range(0, 1);
    }
    if ($reqtype == 'trc') {
        $query = db_select('bgmap_obd_gps', 'a')
            ->fields('a', array('sid', 'timestamp', 'longitude', 'latitude'))
            // TODO: Currently assumes single sid.
            ->condition('sid', $sid_list, 'IN')
            //->condition('sid', array(1,5,7),'IN')
            //->condition('status', 0,'>')
            ->condition('timestamp', array($start_time, $end_time), 'BETWEEN')
            ->orderBy('datetime', 'DESC');
    }

    $result = $query->execute();
    db_set_active();
    return $result;
}


function _update_ext_db($nid, $sid, $vnum, $vgroup, $flag)
{
    $bg_db = array(
        'database' => 'bgmap',
        'username' => 'bgmap', // assuming this is necessary
        'password' => 'bgmap%user$1', // assuming this is necessary
        'host' => 'localhost', // assumes localhost
        'driver' => 'mysql', // replace with your database driver
    );

    Database::addConnectionInfo('BLUGRAPHTECH', 'default', $bg_db);
    db_set_active('BLUGRAPHTECH');

    //$query = array();
    if ($flag) {
        db_insert('bgmap_obd_node_map')
            ->fields(array(
                'nid' => $nid,
                'sid' => $sid,
                'veh_num' => $vnum,
                'veh_type' => $vgroup,
            ))->execute();
    } else {
        db_update('bgmap_obd_node_map')
            ->fields(array(
                'nid' => $nid,
                'sid' => $sid,
                'veh_num' => $vnum,
                'veh_type' => $vgroup,
            ))
            ->condition('nid', $nid)
            ->execute();
    }
    // without the paramater means set back to the default for the site
    db_set_active();
}

/**
 * Page callback: Module admin settings page.
 *
 * @see current_posts_menu()
 */
function bgmap_form($form, &$form_state)
{
    $form['bgmap_max'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximum number of entries in the chart'),
        '#default_value' => variable_get('bgmap_max', 3),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t('The maximum number of entries to display in the chart.'),
        '#required' => TRUE,
    );
    return system_settings_form($form);
}

//drupal_set_message((string) $query);
//while($record = $result->fetchAssoc()) {
//print_r($record);
//dpm($filter);
//$today = getdate();
//$start_time = mktime(0, 0, 0,$today['mon'],($today['mday'] - 20), $today['year']);
